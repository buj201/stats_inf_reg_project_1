head(meltData)
meltData <- melt(BGS, id=c("Sex"))
p <- ggplot(meltData, aes(factor(variable), value))
p + geom_boxplot(aes(x=as.factor(Sex),y=boxthis)) + facet_wrap(~variable, scale="free")
library(reshape2)
meltData <- melt(BGS, id=c("Sex"))
p <- ggplot(meltData, aes(factor(variable), value))
p + geom_boxplot(aes(x=as.factor(Sex))) + facet_wrap(~variable, scale="free")
meltData <- melt(BGS, id=c("Sex", "Soma"))
p <- ggplot(meltData, aes(factor(variable), value))
p + geom_point(aes(x=value, y=Soma, colour=Sex)) + facet_wrap(~variable, scale="free")
```
meltData <- melt(BGS, id=c("Sex", "Soma"))
p <- ggplot(meltData, aes(factor(variable), value))
p + geom_point(aes(x=value, y=Soma, colour=factor(Sex))) + facet_wrap(~variable, scale="free")
meltData <- melt(BGS, id=c("Sex"))
p <- ggplot(meltData, aes(factor(variable), value))
p + geom_boxplot(aes(x=as.factor(Sex))) + facet_wrap(~variable, scale="free")
```
meltData <- melt(BGS, id=c("Sex"))
p <- ggplot(meltData, aes(factor(variable), value))
p + geom_boxplot(aes(x=as.factor(Sex), fill=factor(Sex))) + facet_wrap(~variable, scale="free")
str(BGS)
X = model.matrix(BGS)
X
X = model.matrix(~1 + Sex + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + Sex:(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
X
X = model.matrix(~1 + factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
X
X = model.matrix(~1 + factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
fit = glmnet(x, y)
plot(fit)
X = model.matrix(~1 + factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
fit = glmnet(X, y)
plot(fit)
X = model.matrix(~1 + factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
cvfit = cv.glmnet(X, y)
plot(cvfit)
X = model.matrix(~1 + factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
cvfit = cv.glmnet(X, y, nlambda = 100)
plot(cvfit)
X = model.matrix(~1 + factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
cvfit = cv.glmnet(X, y, nlambda = 100,nfolds = 20)
plot(cvfit)
len(BGS)
length(BGS)
str(BGS)
X = model.matrix(~1 + factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
cvfit = cv.glmnet(X, y, nlambda = 100,nfolds = 136)
plot(cvfit)
X = model.matrix(~1 + factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
cvfit = cv.glmnet(X, y, nlambda = 100,nfolds = 10)
plot(cvfit)
coef(cvfit, s = "lambda.1se")
X = model.matrix(~factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
cvfit = cv.glmnet(X, y, nlambda = 100,nfolds = 10)
plot(cvfit)
coef(cvfit, s = "lambda.1se")
X
X = model.matrix(~factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
X
X = model.matrix(~factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
X = model.matrix(~0 + factor(Sex) + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
X
X = model.matrix(~0 + Sex + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + factor(Sex):(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
X
X = model.matrix(~0 + Sex + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + Sex:(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
X
colnames(X)
y = BGS$Soma
library(glmnet)
cvfit = cv.glmnet(X, y, nlambda = 100,nfolds = 10)
plot(cvfit)
coef(cvfit, s = "lambda.1se")
X = model.matrix(~0 + Sex + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + Sex:(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
cvfit = cv.glmnet(X, y, nlambda = 100,nfolds = 10)
plot(cvfit)
title('Mean-squared error from lasso model, vs. log(lambda)')
coef(cvfit, s = "lambda.1se")
X = model.matrix(~0 + Sex + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + Sex:(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
cvfit = cv.glmnet(X, y, nlambda = 100,nfolds = 5)
plot(cvfit)
coef(cvfit, s = "lambda.1se")
X = model.matrix(~0 + Sex + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + Sex:(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
cvfit = cv.glmnet(X, y, nlambda = 100,nfolds = 3)
plot(cvfit)
coef(cvfit, s = "lambda.1se")
X = model.matrix(~0 + Sex + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + Sex:(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
library(glmnet)
cvfit = cv.glmnet(X, y, nlambda = 100,nfolds = 10)
plot(cvfit)
coef(cvfit, s = "lambda.1se")
str(coef(cvfit, s = "lambda.1se"))
coef(cvfit, s = "lambda.1se")
coef(cvfit, s = "lambda.1se")$x
str(ccoef(cvfit, s = "lambda.1se")oef)
str(coef(cvfit, s = "lambda.1se"))
kable(coef(cvfit, s = "lambda.1se"))
as.matrix(coef(cvfit, s = "lambda.1se"))
as.data.frame(coef(cvfit, s = "lambda.1se"))
t(as.matrix(coef(cvfit, s = "lambda.1se")))
t(as.matrix(coef(cvfit, s = "lambda.1se")))
coefs = t(as.matrix(coef(cvfit, s = "lambda.1se")))
not_zero = coefs[coefs != 0]
not_zero
coefs != 0
not_zero = coefs[coefs != 0,]
str(coefs)
not_zero = coefs[coefs != 0,drop=FALSE]
not_zero
coefs[not_zero]
not_zero = coefs[,coefs != 0]
not_zero
coefs = as.matrix(coef(cvfit, s = "lambda.1se"))
not_zero = coefs[,coefs != 0]
not_zero = coefs[coefs != 0,]
not_zero
```{r echo = FALSE, message=FALSE}
names(not_zer)
names(not_zer0)
names(not_zero)
cvfit$lambda.1se
1:100
length(names(not_zero))
coefficients = matrix(0, 100, 11)
colnames(coefficients) = names(not_zero)
coefficients
cbind(X,y)
all_data[sample=(136, replace=T),]
bootsample = all_data[sample(136, replace=T),]
all_data = cbind(X,y)
bootsample = all_data[sample(136, replace=T),]
bootsample
names(bootsample)
colnames(bootsample)
colnames(bootsample) != 'y'
boot_X = bootsample[,(colnames(bootsample)!='y')]
boot_y = bootsample$y
model = glmnet(boot_X, boot_y, family="gaussian", lambda=cvfit$lambda.1se,4, alpha=1)
boot_y = bootsample[,y]
model = glmnet(boot_X, boot_y, family="gaussian", lambda=cvfit$lambda.1se,4, alpha=1)
model = glmnet(boot_X, boot_y, lambda=cvfit$lambda.1se)
model = glmnet(boot_X, boot_y, family="gaussian", lambda=cvfit$lambda.1se)
model = glmnet(boot_X, boot_y,nlambda = 100)
model = glmnet(boot_X, boot_y)
model = glmnet(boot_X, boot_y, w=1)
boot_y
bootsample = all_data[sample(136, replace=T),]
boot_X = bootsample[,(colnames(bootsample)!='y')]
boot_y = bootsample[,c('y')]
booy_y
boot_y
model = glmnet(boot_X, boot_y)
coef.exact = coef(model, s = cvfit$lambda.1se, exact = TRUE)
coef.exact
names(coef.exact)
rownames(coef.exact)
names(not_zero)
all_data = cbind(X,y)
coefficients = matrix(0, 100, 20)
for(i in 1:100){
bootsample = all_data[sample(136, replace=T),]
boot_X = bootsample[,(colnames(bootsample)!='y')]
boot_y = bootsample[,c('y')]
model = glmnet(boot_X, boot_y)
coef.exact = coef(model, s = cvfit$lambda.1se, exact = TRUE)
coefficients[i,] = coef.exact
}
colnames(coefficients) = rownames(coef.exact)
target_vars = coefficients[,names(not_zero)]
all_data = cbind(X,y)
coefficients = matrix(0, 100, 20)
for(i in 1:100){
bootsample = all_data[sample(136, replace=T),]
boot_X = bootsample[,(colnames(bootsample)!='y')]
boot_y = bootsample[,c('y')]
model = glmnet(boot_X, boot_y)
coef.exact = coef(model, s = cvfit$lambda.1se, exact = TRUE)
cat(length(coef.exact))
coefficients[i,] = coef.exact
}
colnames(coefficients) = rownames(coef.exact)
target_vars = coefficients[,names(not_zero)]
coefficients[1,]
length(coefficients[1,])
str(coef.exact)
c(coef.exact)
as.matrix(coef.exact)
as.matrix(coef.exact)
t(as.matrix(coef.exact))
all_data = cbind(X,y)
coefficients = matrix(0, 100, 20)
for(i in 1:100){
bootsample = all_data[sample(136, replace=T),]
boot_X = bootsample[,(colnames(bootsample)!='y')]
boot_y = bootsample[,c('y')]
model = glmnet(boot_X, boot_y)
coef.exact = coef(model, s = cvfit$lambda.1se, exact = TRUE)
coefficients[i,] = t(as.matrix(coef.exact))
}
colnames(coefficients) = rownames(coef.exact)
target_vars = coefficients[,names(not_zero)]
coefficients
target_vars
?apply
apply(target_vars, 1, sd)
apply(target_vars, 2, sd)
apply(target_vars, 2, mean)
meltCoefs <- melt(target_vars)
meltCoefs
head(meltCoefs)
?geom_hist
?geom_histogram
meltCoefs <- melt(target_vars)
p <- ggplot(meltCoefs, aes(factor(Var2), value))
p + geom_histogram() + facet_wrap(~Var2, scale="free", nrow=2)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram() + facet_wrap(~Var2, scale="free", nrow=2)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 10) + facet_wrap(~Var2, scale="free", nrow=2)
meltCoefs <- melt(coefficients)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 10) + facet_wrap(~Var2, scale="free", nrow=2)
```
meltCoefs <- melt(coefficients)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 10) + facet_wrap(~Var2, scale="free", nrow=5, ncol=4)
names(not_zero)
meltCoefs <- melt(target_vars)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 15) + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + geom_density(color="red")
all_data = cbind(X,y)
coefficients = matrix(0, 100, 20)
for(i in 1:500){
bootsample = all_data[sample(136, replace=T),]
boot_X = bootsample[,(colnames(bootsample)!='y')]
boot_y = bootsample[,c('y')]
model = glmnet(boot_X, boot_y)
coef.exact = coef(model, s = cvfit$lambda.1se, exact = TRUE)
coefficients[i,] = t(as.matrix(coef.exact))
}
colnames(coefficients) = rownames(coef.exact)
target_vars = coefficients[,names(not_zero)]
all_data = cbind(X,y)
coefficients = matrix(0, 500, 20)
for(i in 1:500){
bootsample = all_data[sample(136, replace=T),]
boot_X = bootsample[,(colnames(bootsample)!='y')]
boot_y = bootsample[,c('y')]
model = glmnet(boot_X, boot_y)
coef.exact = coef(model, s = cvfit$lambda.1se, exact = TRUE)
coefficients[i,] = t(as.matrix(coef.exact))
}
colnames(coefficients) = rownames(coef.exact)
target_vars = coefficients[,names(not_zero)]
```
meltCoefs <- melt(target_vars)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 15) + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + geom_density(color="red")
for(i in target_vars){mean(i)}
for(i in target_vars){cat(i)}
target_vars
meltCoefs <- melt(target_vars)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 15) + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + geom_density(color="red")
meltCoefs <- melt(target_vars)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 15) + geom_density(color="red") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4)
meltCoefs <- melt(target_vars)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(color="red") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4)
rowQuantiles(target_vars, probs=c(0.025, 0.975))
install.packages("matrixStats")
library(matrixStats)
rowQuantiles(target_vars, probs=c(0.025, 0.975))
columnQuantiles(target_vars, probs=c(0.025, 0.975))
colQuantiles(target_vars, probs=c(0.025, 0.975))
colQuantiles(target_vars, probs=c(0.025, 0.975))
cbind(colQuantiles(target_vars, probs=c(0.025, 0.975)), apply(target_vars,2,mean))
meltCoefs <- melt(target_vars)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(color="red") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4)
meltCoefs <- melt(target_vars)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(color="red") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
meltCoefs[,1:6]
meltCoefs
head(meltCoefs)
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(aes(color="red")) + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 15, y=..density..) + geom_density(color="red") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
p <- ggplot(meltCoefs, aes(value))
p + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(color="red") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
not_zero
meltCoefs = melt(target_vars)
p = ggplot(meltCoefs, aes(value)) + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(color="red") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4)
meltCoefs = melt(target_vars)
p = ggplot(meltCoefs, aes(value)) + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(color="red") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4)
p = ggplot(meltCoefs, aes(value)) + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(color="red") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
meltCoefs = melt(target_vars)
p = ggplot(meltCoefs, aes(value)) + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(color="red") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
meltCoefs = melt(target_vars)
p = ggplot(meltCoefs, aes(value)) + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(color="red") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
meltCoefs = melt(target_vars)
p = ggplot(meltCoefs, aes(value)) + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(color="green") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
meltCoefs
target_vars
meltCoefs = melt(target_vars)
p = ggplot(meltCoefs, aes(value)) + geom_histogram(bins = 15, aes(y=..density..)) + geom_density(color="green") + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
p = ggplot(meltCoefs, aes(x = value)) + geom_histogram(aes(y=..density..), bins = 15) + geom_density() + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
meltCoefs = melt(target_vars)
p = ggplot(meltCoefs, aes(x = value)) + geom_histogram(aes(y=..density..), bins = 15) + geom_density() + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
setwd("~/Desktop/MS_Courses/Stats_inf_regression/Project_1")
BGS = read.csv('BGS.csv', row.names=c(1))
girls = BGS[BGS$Sex == 1,]
boys = BGS[BGS$Sex == 0,]
get_cont_summary = function(dataframe){
continuous_data = dataframe[,!(names(dataframe) %in% c('Sex', 'Soma'))]
sample_mean = apply(continuous_data, 2, mean)
sample_sd = apply(continuous_data, 2, sd)
sample_median = apply(continuous_data,2,median)
sample_min = apply(continuous_data, 2, min)
sample_max = apply(continuous_data, 2, max)
summary_cont = t(data.frame(sample_mean, sample_sd, sample_median, sample_min, sample_max))
row.names(summary_cont) = c('Sample mean', 'Sample SD','Sample median', 'Sample min', 'Sample max')
return(summary_cont)
}
get_sex_summary = function(dataframe){
sex_table = table(dataframe[,c('Sex')])
sex_table = cbind(sex_table, sex_table / sum(sex_table))
colnames(sex_table) = c('Count', 'Sample proportion')
return(sex_table)
}
get_soma_summary = function(BGS){
girls = BGS[BGS$Sex == 1,]
boys = BGS[BGS$Sex == 0,]
girls_soma_table = as.data.frame(table(girls[,c('Soma')]),stringsAsFactors=FALSE)
girls_soma_table[,'Perc_girls'] = girls_soma_table$Freq / sum(girls_soma_table$Freq)
boys_soma_table =  as.data.frame(table(boys[,c('Soma')]),stringsAsFactors=FALSE)
boys_soma_table[,'Perc_boys'] = boys_soma_table$Freq / sum(boys_soma_table$Freq)
soma_table = merge(girls_soma_table, boys_soma_table, by = c('Var1'), all = TRUE)
soma_table[is.na(soma_table)] = 0
colnames(soma_table) = c('Soma', 'Count- girls', 'Sample proportion- girls', 'Count- boys', 'Sample proportion- boys')
soma_table$Soma = as.numeric(soma_table$Soma)
soma_table = soma_table[order(soma_table$Soma),]
return(soma_table)
}
library(reshape2)
library(ggplot2)
meltData <- melt(BGS, id=c("Sex"))
p <- ggplot(meltData, aes(factor(variable), value))
p + geom_boxplot(aes(x=as.factor(Sex), fill=factor(Sex))) + facet_wrap(~variable, scale="free", nrow=2) + ylab('Numeric feature value') + xlab('Numeric feature split by sex (0 = Male, 1 = Female)') + labs(fill='Sex')
library(reshape2)
meltData <- melt(BGS, id=c("Sex", "Soma"))
p <- ggplot(meltData, aes(factor(variable), value))
p + geom_point(aes(x=value, y=Soma, colour=factor(Sex))) + facet_wrap(~variable, scale="free", nrow=2) + ylab('Somatype value (0-7)') + xlab('Continuous feature') + labs(colour='Sex')
library(glmnet)
X = model.matrix(~0 + Sex + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + Sex:(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
cvfit = cv.glmnet(X, y, nlambda = 100,nfolds = 10)
plot(cvfit)
coefs = as.matrix(coef(cvfit, s = "lambda.1se"))
not_zero = coefs[coefs != 0,]
kable(t(not_zero), format='latex', digits = 3, caption = 'Non-zero coefficients of final lasso model')
library(knitr)
kable(get_cont_summary(BGS), format='latex',digits = 2, caption = 'Summary of continuous features- both genders')
kable(get_cont_summary(boys), format='latex',digits = 2, caption = 'Summary of continuous features- boys')
kable(get_cont_summary(girls), format='latex',digits = 2, caption = 'Summary of continuous features- girls')
kable(get_soma_summary(BGS), format='latex',digits = 2, caption = 'Summary of soma distribution- both genders')
kable(get_sex_summary(BGS), format='latex',digits = 2, caption = 'Summary of sex distribution')
coefs = as.matrix(coef(cvfit, s = "lambda.1se"))
not_zero = coefs[coefs != 0,]
kable(t(not_zero), format='latex', digits = 3, caption = 'Non-zero coefficients of final lasso model')
all_data = cbind(X,y)
coefficients = matrix(0, 500, 20)
for(i in 1:500){
bootsample = all_data[sample(136, replace=T),]
boot_X = bootsample[,(colnames(bootsample)!='y')]
boot_y = bootsample[,c('y')]
model = glmnet(boot_X, boot_y)
coef.exact = coef(model, s = cvfit$lambda.1se, exact = TRUE)
coefficients[i,] = t(as.matrix(coef.exact))
}
colnames(coefficients) = rownames(coef.exact)
target_vars = coefficients[,names(not_zero)]
meltCoefs = melt(target_vars)
p = ggplot(meltCoefs, aes(x = value)) + geom_histogram(aes(y=..density..), bins = 15) + geom_density() + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
p = ggplot(meltCoefs, aes(x = value))
p + geom_histogram(aes(y=..density..), bins = 15) + geom_density() + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
p = ggplot(meltCoefs, aes(x = value))
p + geom_histogram(aes(y=..density..), bins = 15) + geom_density(color='red') + facet_wrap(~Var2, scale="free", nrow=3, ncol=4) + xlab('Feature in the lasso model') + ylab('Bootstrap estimate of density')
y_hat = predict(cvfit, X)
resids = y - y_hat
plot(resids)
resid_plot_df = data.frame(X[,'Sex'], resids)
resid_plot-df
resid_plot_df
y_hat = predict(cvfit, X)
resids = y - y_hat
resid_plot_df = data.frame(X[,'Sex'], resids)
colnames(resid_plot_df) = c('Sex','Resid')
ggplot(resid_plot_df, aes(y = resids)) + geom_point(aes(color = factor(BGS.Sex, labels = c('Male','Female')))) + ggtitle('Residual plot') + ylab('Residuals') + xlab('Height at age 2') + labs(color = "Sex")
y_hat = predict(cvfit, X)
resids = y - y_hat
resid_plot_df = data.frame(X[,'Sex'], resids)
colnames(resid_plot_df) = c('Sex','Resid')
ggplot(resid_plot_df, aes(y = Resid)) + geom_point(aes(color = factor(Sex, labels = c('Male','Female')))) + ggtitle('Residual plot') + ylab('Residuals') + xlab('Height at age 2') + labs(color = "Sex")
resid_plot_df = data.frame(X[,'Sex'], y, resids)
resid_plot_df
y_hat = predict(cvfit, X)
resids = y - y_hat
resid_plot_df = data.frame(X[,'Sex'], y, resids)
colnames(resid_plot_df) = c('Sex','y,','Resid')
ggplot(resid_plot_df, aes(x=y, y = Resid)) + geom_point(aes(color = factor(Sex, labels = c('Male','Female')))) + ggtitle('Residual plot') + ylab('Residuals') + xlab('Height at age 2') + labs(color = "Sex")
y_hat = predict(cvfit, X)
resids = y - y_hat
resid_plot_df = data.frame(X[,'Sex'], y, resids)
colnames(resid_plot_df) = c('Sex','y,','Resid')
ggplot(resid_plot_df, aes(x=y, y = resids)) + geom_point(aes(color = factor(Sex, labels = c('Male','Female')))) + ggtitle('Residual plot') + ylab('Residuals') + xlab('Height at age 2') + labs(color = "Sex")
ggplot(resid_plot_df, aes(x=Soma, y = Resid)) + geom_point(aes(color = factor(Sex, labels = c('Male','Female')))) + ggtitle('Residual plot') + ylab('Residuals') + xlab('Height at age 2') + labs(color = "Sex")
y_hat = predict(cvfit, X)
resids = y - y_hat
resid_plot_df = data.frame(X[,'Sex'], y, resids)
colnames(resid_plot_df) = c('Sex','Soma','Resid')
ggplot(resid_plot_df, aes(x=Soma, y = Resid)) + geom_point(aes(color = factor(Sex, labels = c('Male','Female')))) + ggtitle('Residual plot') + ylab('Residuals') + xlab('Height at age 2') + labs(color = "Sex")
X
ggplot(resid_plot_df, aes(x=Soma, y = Resid)) + geom_point(aes(color = factor(Sex, labels = c('Male','Female')))) + ggtitle('Residual plot') + ylab('Residuals') + xlab('Height at age 2') + labs(color = "Sex")
y_hat = predict(cvfit, X, s = cvfit$lambda.1se)
resids = y - y_hat
resid_plot_df = data.frame(X[,'Sex'], y, resids)
colnames(resid_plot_df) = c('Sex','Soma','Resid')
ggplot(resid_plot_df, aes(x=Soma, y = Resid)) + geom_point(aes(color = factor(Sex, labels = c('Male','Female')))) + ggtitle('Residual plot') + ylab('Residuals') + xlab('Somatype') + labs(color = "Sex")
y_hat = predict(cvfit, X, s = cvfit$lambda.1se)
resids = y - y_hat
resid_plot_df = data.frame(X[,'Sex'], y, resids)
colnames(resid_plot_df) = c('Sex','Soma','Resid')
ggplot(resid_plot_df, aes(x=Soma, y = Resid)) + geom_point(aes(color = factor(Sex, labels = c('Male','Female')))) + ggtitle('Residual plot') + ylab('Residuals') + xlab('Somatype') + labs(color = "Sex")
X = model.matrix(~0 + Sex + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + Sex:(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
y = BGS$Soma
cvfit = cv.glmnet(X, y, nlambda = 100,nfolds = 10)
plot(cvfit)
y_hat = predict(cvfit, X, s = cvfit$lambda.1se)
resids = y - y_hat
resid_plot_df = data.frame(X[,'Sex'], y, resids)
colnames(resid_plot_df) = c('Sex','Soma','Resid')
ggplot(resid_plot_df, aes(x=Soma, y = Resid)) + geom_point(aes(color = factor(Sex, labels = c('Male','Female')))) + ggtitle('Residual plot') + ylab('Residuals') + xlab('Somatype') + labs(color = "Sex")
name(not_zero)
names(not_zero)
no_reg = lm(BGS$Soma ~ BGS$WT2 + BGS$WT9 + BGS$HT2 + BGS$WT18 + BGS$HT18 + BGS$LG18 + BGS$ST18 + BGS$Sex:(BGS$WT9 + BGS$ST9))
summary(no_reg)
no_reg$residuals
plot(no_reg$residuals, BGS$Soma)
resids = no_reg$residuals
resid_plot_df = data.frame(X[,'Sex'], y, resids)
colnames(resid_plot_df) = c('Sex','Soma','Resid')
ggplot(resid_plot_df, aes(x=Soma, y = Resid)) + geom_point(aes(color = factor(Sex, labels = c('Male','Female')))) + ggtitle('Residual plot') + ylab('Residuals') + xlab('Somatype') + labs(color = "Sex")
simple = lm(BGS$Soma ~ BGS$HT18 + BGS$WT18 + BGS$ST18)
summary(simple)
plot(simple$residuals, BGS$Soma)
simple = lm(BGS$Soma ~ BGS$Sex + BGS$HT18 + BGS$WT18 + BGS$ST18)
summary(simple)
plot(simple$residuals, BGS$Soma)
X = model.matrix(~0 + Sex + WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18 + Sex:(WT2 + HT2 + WT9 + LG9 + ST9 + WT18 + HT18 + LG18 + ST18), data = BGS)
head(X)
y_hat = predict(cvfit, X, s = cvfit$lambda.1se)
hist(y_hat)
plot(y_hat, y)
ls
pwd
getwd()
purl('final_report.Rmd')
girls = BGS[BGS$Sex == 1,]
library(reshape2)
meltGirls <- melt(girls[,c("Soma","WT2",'WT9','WT18')], id=c("Soma"))
p <- ggplot(meltData, aes(value, Soma))
p + geom_point(aes(x=value, y=Soma)) + facet_wrap(~variable, scale="free", nrow=1) + ylab('Soma') + xlab('Weights (ages 2, 9, and 18)')
girls = BGS[BGS$Sex == 1,]
library(ggplot2)
library(reshape2)
meltGirls <- melt(girls[,c("Soma","WT2",'WT9','WT18')], id=c("Soma"))
p <- ggplot(meltData, aes(value, Soma))
p + geom_point(aes(x=value, y=Soma)) + facet_wrap(~variable, scale="free", nrow=1) + ylab('Soma') + xlab('Weights (ages 2, 9, and 18)')
library(ggplot2)
library(reshape2)
meltGirls <- melt(girls[,c("Soma","WT2",'WT9','WT18')], id=c("Soma"))
p <- ggplot(meltGirls, aes(value, Soma))
p + geom_point(aes(x=value, y=Soma)) + facet_wrap(~variable, scale="free", nrow=1) + ylab('Soma') + xlab('Weights (ages 2, 9, and 18)')
This residual plot shows the residuals are fairly evenly distributed around 0 (regardless of predicted value). We don't see constant variance, but again that is not unexpected or unexplained (since it is apparent the variance in residuals differs between boys and girls).
